name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  checks: write
  pull-requests: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    name: Backend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./back-end

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Build and Test with Maven
        run: mvn -B test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.h2.Driver
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: password
          SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.H2Dialect
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: ./back-end/target/surefire-reports/
          retention-days: 5

  frontend-tests:
    name: Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: kasutaja
          POSTGRES_PASSWORD: koodjohvi
          POSTGRES_DB: match
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Setup and run backend in background
      - name: Set up JDK for backend
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Set up Maven for backend
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.4
          
      - name: Build backend
        working-directory: ./back-end
        run: mvn -B package -DskipTests
        
      - name: Start backend server
        working-directory: ./back-end
        run: |
          nohup java -jar target/*.jar > backend.log 2>&1 &
          echo $! > backend.pid
          # Wait for backend to start
          echo "Waiting for backend to start..."
          timeout 60 bash -c 'until curl -s http://localhost:8000/v3/api-docs > /dev/null; do sleep 2; done'
          echo "Backend started successfully"
      
      # Setup and run frontend
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: 'front-end/pnpm-lock.yaml'
      
      - name: Install dependencies
        working-directory: ./front-end
        run: pnpm install
        
      # Build and start frontend server
      - name: Build frontend
        working-directory: ./front-end
        run: pnpm build
        env:
          VITE_GEOAPI_BASE_URL: https://api.api-ninjas.com/v1/geocoding
          VITE_GEOAPI_KEY: dummy
          VITE_API_URL: http://localhost:8000/api
          VITE_WS_URL: ws://localhost:8000/ws
          VITE_MAX_AVATAR_SIZE_MB: 5

      - name: Start frontend preview server
        working-directory: ./front-end
        run: |
          nohup pnpm preview --port 3000 --host > frontend.log 2>&1 &
          echo $! > frontend.pid
          # Wait for frontend to start
          echo "Waiting for frontend to start..."
          timeout 30 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'
          echo "Frontend started successfully"
        env:
          VITE_GEOAPI_BASE_URL: https://api.api-ninjas.com/v1/geocoding
          VITE_GEOAPI_KEY: dummy
          VITE_API_URL: http://localhost:8000/api
          VITE_WS_URL: ws://localhost:8000/ws
          VITE_MAX_AVATAR_SIZE_MB: 5

      # Cache and Install Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ./front-end
        run: pnpm exec playwright install chromium
      
      - name: Run Playwright tests
        working-directory: ./front-end
        run: CI=true pnpm exec playwright test
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ./front-end/playwright-report/
          retention-days: 5
          
      # Cleanup
      - name: Stop servers
        if: always()
        run: |
          if [ -f back-end/backend.pid ]; then
            kill $(cat back-end/backend.pid) || true
            echo "Backend server stopped"
          fi
          if [ -f front-end/frontend.pid ]; then
            kill $(cat front-end/frontend.pid) || true
            echo "Frontend server stopped"
          fi
          
      - name: Server logs
        if: always()
        run: |
          echo "=== BACKEND LOGS ==="
          cat back-end/backend.log || true
          echo "=== FRONTEND LOGS ==="
          cat front-end/frontend.log || true 