type Query {
  user(id: ID!): User
  bio(id: ID!): Bio
  profile(id: ID!): Profile
  me: User
  myBio: Bio
  myProfile: Profile
  recommendations: [User]
  connections: [User]
  ping: Pong
}

type User {
  id: ID!
  email: String
  number: String
  profile: Profile
  bio: Bio
}

type Profile {
  user: User!
  firstName: String
  lastName: String
  alias: String
  city: String
  profilePicture: String
  aboutMe: String
  preferences: Preferences
}

type Preferences {
  gender: UserGenderEnum
  ageMin: Int
  ageMax: Int
  distance: Int
}

type Bio {
  user: User!
  gender: UserGenderEnum
  birthdate: String
  location: [Float]
  hobbies: [Hobby]
}

type Hobby {
  id: ID!
  name: String
}

enum UserGenderEnum {
  MALE
  FEMALE
  OTHER
}

type ConnectionUpdateEvent {
  action: ConnectionUpdateType!
  connection: ConnectionProvider!
}

type ConnectionProvider {
  connectionId: ID!
  userId: ID!
}

enum ConnectionUpdateType {
  NEW_REQUEST
  REQUEST_SENT
  REQUEST_ACCEPTED
  REQUEST_REJECTED
  DISCONNECTED
}

input MessagesSendInput {
  connectionId: ID!
  content: String!
}

input MarkReadInput {
  connectionId: ID!
}

input TypingStatusInput {
  connectionId: ID!
  senderId: ID!
  isTyping: Boolean!
}

type MessageEvent {
  type: MessageEventTypeEnum
  timestamp: String
}

enum MessageEventTypeEnum {
  SENT
  RECEIVED
  READ
}

type ChatMessage {
  messageId: ID!
  connectionId: ID!
  senderId: ID!
  senderAlias: String
  content: String!
  createdAt: String!
  event: MessageEvent
}

type ChatPreview {
  connectionId: ID!
  connectedUserId: ID!
  connectedUserAlias: String!
  connectedUserFirstName: String!
  connectedUserLastName: String!
  connectedUserProfilePicture: String!
  lastMessageContent: String!
  lastMessageTimestamp: String!
  unreadMessageCount: Int!
}

type TypingStatus {
  connectionId: ID!
  senderId: ID!
  isTyping: Boolean!
}

type OnlineStatus {
  connectionId: ID!
  userId: ID!
  isOnline: Boolean!
}

type Pong {
  timestamp: String!
  status: String!
  userId: ID!
  peerStatuses: [OnlineStatus]
}

type MessageStatusUpdate {
  messageId: ID!
  connectionId: ID!
  type: MessageEventTypeEnum
  timestamp: String
}

type Mutation {
  sendConnectionRequest(targetUserId: ID!): ConnectionUpdateEvent
  acceptConnectionRequest(connectionId: ID!): ConnectionUpdateEvent
  rejectConnectionRequest(connectionId: ID!): ConnectionUpdateEvent
  disconnectConnection(connectionId: ID!): ConnectionUpdateEvent

  markMessagesAsRead(input: MarkReadInput!): ChatPreview
  sendMessage(input: MessagesSendInput!): ChatMessage
  typingStatus(input: TypingStatusInput!): Boolean
}

type Subscription {
  connectionUpdates: ConnectionUpdateEvent
  messages: ChatMessage
  messageStatus: MessageStatusUpdate
  chatPreviews: [ChatPreview]

  typingStatusUpdates: TypingStatus
  onlineStatusUpdates: OnlineStatus
}
