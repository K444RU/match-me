/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Blind API
 * kood/Jõhvi match-me task API
 * OpenAPI spec version: v0.0.1
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  AccountSettingsRequestDTO,
  AttributesSettingsRequestDTO,
  BiographicalResponseDTO,
  ConnectionResponseDTO,
  CurrentUserResponseDTO,
  PreferencesSettingsRequestDTO,
  ProfilePictureSettingsRequestDTO,
  ProfileResponseDTO,
  ProfileSettingsRequestDTO,
  UserParametersRequestDTO,
  VerifyAccountParams,
} from './types';

export const getUserController = () => {
  const updateProfile = <TData = AxiosResponse<unknown>>(
    profileSettingsRequestDTO: ProfileSettingsRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.put(
      `http://localhost:8000/api/users/settings/profile`,
      profileSettingsRequestDTO,
      options
    );
  };
  const updatePreferences = <TData = AxiosResponse<unknown>>(
    preferencesSettingsRequestDTO: PreferencesSettingsRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.put(
      `http://localhost:8000/api/users/settings/preferences`,
      preferencesSettingsRequestDTO,
      options
    );
  };
  const updateAttributes = <TData = AxiosResponse<unknown>>(
    attributesSettingsRequestDTO: AttributesSettingsRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.put(
      `http://localhost:8000/api/users/settings/attributes`,
      attributesSettingsRequestDTO,
      options
    );
  };
  const updateAccount = <TData = AxiosResponse<unknown>>(
    accountSettingsRequestDTO: AccountSettingsRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.put(
      `http://localhost:8000/api/users/settings/account`,
      accountSettingsRequestDTO,
      options
    );
  };
  const uploadProfilePicture = <TData = AxiosResponse<unknown>>(
    profilePictureSettingsRequestDTO: ProfilePictureSettingsRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:8000/api/users/profile-picture`,
      profilePictureSettingsRequestDTO,
      options
    );
  };
  const verifyAccount = <TData = AxiosResponse<unknown>>(
    userId: number,
    params: VerifyAccountParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.patch(
      `http://localhost:8000/api/users/verify/${userId}`,
      undefined,
      {
        ...options,
        params: { ...params, ...options?.params },
      }
    );
  };
  const setParameters = <TData = AxiosResponse<unknown>>(
    userParametersRequestDTO: UserParametersRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.patch(
      `http://localhost:8000/api/users/complete-registration`,
      userParametersRequestDTO,
      options
    );
  };
  const getUser = <TData = AxiosResponse<CurrentUserResponseDTO>>(
    targetId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:8000/api/users/${targetId}`,
      options
    );
  };
  const getProfile = <TData = AxiosResponse<ProfileResponseDTO>>(
    targetId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:8000/api/users/${targetId}/profile`,
      options
    );
  };
  const getConnections = <TData = AxiosResponse<ConnectionResponseDTO[]>>(
    targetId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:8000/api/users/${targetId}/connections`,
      options
    );
  };
  const getBio = <TData = AxiosResponse<BiographicalResponseDTO>>(
    targetId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(
      `http://localhost:8000/api/users/${targetId}/bio`,
      options
    );
  };
  return {
    updateProfile,
    updatePreferences,
    updateAttributes,
    updateAccount,
    uploadProfilePicture,
    verifyAccount,
    setParameters,
    getUser,
    getProfile,
    getConnections,
    getBio,
  };
};
export type UpdateProfileResult = AxiosResponse<unknown>;
export type UpdatePreferencesResult = AxiosResponse<unknown>;
export type UpdateAttributesResult = AxiosResponse<unknown>;
export type UpdateAccountResult = AxiosResponse<unknown>;
export type UploadProfilePictureResult = AxiosResponse<unknown>;
export type VerifyAccountResult = AxiosResponse<unknown>;
export type SetParametersResult = AxiosResponse<unknown>;
export type GetUserResult = AxiosResponse<CurrentUserResponseDTO>;
export type GetProfileResult = AxiosResponse<ProfileResponseDTO>;
export type GetConnectionsResult = AxiosResponse<ConnectionResponseDTO[]>;
export type GetBioResult = AxiosResponse<BiographicalResponseDTO>;
