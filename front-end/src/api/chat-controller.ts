/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Blind API
 * kood/Jõhvi match-me task API
 * OpenAPI spec version: v0.0.1
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  ChatMessageResponseDTO,
  ChatPreviewResponseDTO,
  GetChatMessagesParams,
  MessagesSendRequestDTO,
  PageChatMessageResponseDTO,
} from './types';

export const getChatController = () => {
  const getChatMessages = <TData = AxiosResponse<PageChatMessageResponseDTO>>(
    connectionId: number,
    params: GetChatMessagesParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(`http://localhost:8000/api/chats/${connectionId}/messages`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  const sendChatMessage = <TData = AxiosResponse<ChatMessageResponseDTO>>(
    connectionId: number,
    messagesSendRequestDTO: MessagesSendRequestDTO,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.post(
      `http://localhost:8000/api/chats/${connectionId}/messages`,
      messagesSendRequestDTO,
      options
    );
  };
  const getChatPreviews = <TData = AxiosResponse<ChatPreviewResponseDTO[]>>(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.default.get(`http://localhost:8000/api/chats/previews`, options);
  };
  return { getChatMessages, sendChatMessage, getChatPreviews };
};
export type GetChatMessagesResult = AxiosResponse<PageChatMessageResponseDTO>;
export type SendChatMessageResult = AxiosResponse<ChatMessageResponseDTO>;
export type GetChatPreviewsResult = AxiosResponse<ChatPreviewResponseDTO[]>;
