/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Blind API
 * kood/Jõhvi match-me task API
 * OpenAPI spec version: v0.0.1
 */
import { customInstance } from '../lib/custom-axios-instance';
import type { ConnectionsDTO, MatchingRecommendationsDTO } from './types';

export const getConnectionController = () => {
  const sendConnectionRequest = (userId: number) => {
    return customInstance<void>({ url: `http://localhost:8000/connections/requests/${userId}`, method: 'POST' });
  };
  const rejectConnectionRequest = (requestId: number) => {
    return customInstance<void>({
      url: `http://localhost:8000/connections/requests/${requestId}/reject`,
      method: 'PATCH',
    });
  };
  const acceptConnectionRequest = (requestId: number) => {
    return customInstance<void>({
      url: `http://localhost:8000/connections/requests/${requestId}/accept`,
      method: 'PATCH',
    });
  };
  const getConnections = () => {
    return customInstance<ConnectionsDTO>({ url: `http://localhost:8000/connections`, method: 'GET' });
  };
  const getMatchingRecommendations = () => {
    return customInstance<MatchingRecommendationsDTO>({
      url: `http://localhost:8000/connections/recommendations`,
      method: 'GET',
    });
  };
  const disconnect = (connectionId: number) => {
    return customInstance<void>({ url: `http://localhost:8000/connections/${connectionId}`, method: 'DELETE' });
  };
  return {
    sendConnectionRequest,
    rejectConnectionRequest,
    acceptConnectionRequest,
    getConnections,
    getMatchingRecommendations,
    disconnect,
  };
};
export type SendConnectionRequestResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnectionController>['sendConnectionRequest']>>
>;
export type RejectConnectionRequestResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnectionController>['rejectConnectionRequest']>>
>;
export type AcceptConnectionRequestResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnectionController>['acceptConnectionRequest']>>
>;
export type GetConnectionsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnectionController>['getConnections']>>
>;
export type GetMatchingRecommendationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnectionController>['getMatchingRecommendations']>>
>;
export type DisconnectResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getConnectionController>['disconnect']>>
>;
